export enum Kind {
  Unknown,
  EndOfToken,
  NullLiteral,
  TrueLiteral,
  FalseLiteral,
  NumberLiteral,
  StringLiteral,
  Identifier,

  Function,
  Return,
  Variable,
  For,
  Break,
  Continue,
  If,
  Elif,
  Else,
  Print,
  PrintLine,

  LogicalAnd,
  LogicalOr,
  Assignment,
  Add,
  Subtract,
  Multiply,
  Divide,
  Modulo,
  Equal,
  NotEqual,

  LessThan,
  GreaterThan,
  LessThanOrEqual,
  GreaterThanOrEqual,

  Comma,
  Colon,
  Semicolon,
  Dot,
  LeftParen,
  RightParen,
  LeftBrace,
  RightBrace,
  LeftBracket,
  RightBracket,
}

export const stringToKind = new Map<string, Kind>([
  ["#unknown", Kind.Unknown],
  ["#EndOfToken", Kind.EndOfToken],
  ["null", Kind.NullLiteral],
  ["true", Kind.TrueLiteral],
  ["false", Kind.FalseLiteral],
  ["#Number", Kind.NumberLiteral],
  ["#String", Kind.StringLiteral],
  ["#Identifier", Kind.Identifier],

  ["function", Kind.Function],
  ["return", Kind.Return],
  ["var", Kind.Variable],
  ["for", Kind.For],
  ["break", Kind.Break],
  ["continue", Kind.Continue],
  ["if", Kind.If],
  ["elif", Kind.Elif],
  ["else", Kind.Else],
  ["print", Kind.Print],
  ["println", Kind.PrintLine],

  ["and", Kind.LogicalAnd],
  ["or", Kind.LogicalOr],

  ["=", Kind.Assignment],

  ["+", Kind.Add],
  ["-", Kind.Subtract],
  ["*", Kind.Multiply],
  ["/", Kind.Divide],
  ["%", Kind.Modulo],

  ["==", Kind.Equal],
  ["!=", Kind.NotEqual],
  ["<", Kind.LessThan],
  [">", Kind.GreaterThan],
  ["<=", Kind.LessThanOrEqual],
  [">=", Kind.GreaterThanOrEqual],

  [",", Kind.Comma],
  [":", Kind.Colon],
  [";", Kind.Semicolon],
  [".", Kind.Dot],
  ["(", Kind.LeftParen],
  [")", Kind.RightParen],
  ["{", Kind.LeftBrace],
  ["}", Kind.RightBrace],
  ["[", Kind.LeftBracket],
  ["]", Kind.RightBracket],
]);
